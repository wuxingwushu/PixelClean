#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer Parameter//画布
{
   float Time;
   uint Width;
   uint Height;
};

layout(std430, binding = 1) buffer buf//画布
{
   uint outColor[];
};

uint IntVec4(vec4 color){
    if(color.x > 1.0f){
        color.x = 1.0f;
    }
    if(color.y > 1.0f){
        color.y = 1.0f;
    }
    if(color.z > 1.0f){
        color.z = 1.0f;
    }
    if(color.x < 0.0f){
        color.x = 0.0f;
    }
    if(color.y < 0.0f){
        color.y = 0.0f;
    }
    if(color.z < 0.0f){
        color.z = 0.0f;
    }

    uint ColorU = uint(color.x * 255) * 256;
    ColorU += uint(color.y * 255);
    ColorU += uint(color.z * 255) * 256 * 256;
    ColorU += uint(color.w * 255) * 256 * 256 * 256;
    return ColorU;
}

vec3 palette( float t ) {
    vec3 a = vec3(0.5, 0.5, 0.5);
    vec3 b = vec3(0.5, 0.5, 0.5);
    vec3 c = vec3(1.0, 1.0, 1.0);
    vec3 d = vec3(0.263,0.416,0.557);

    return a + b*cos( 6.28318*(c*t+d) );
}

void main() {
    const uint id_x = gl_GlobalInvocationID.x / Width;
    const uint id_y = gl_GlobalInvocationID.x % Width;
    vec2 fragCoord = vec2(Height - id_x, id_y);
    vec2 winCoord = vec2(Height, Width);
    vec2 uv = (fragCoord * 2.0 - winCoord) / Height;
    vec2 uv0 = uv;
    vec3 finalColor = vec3(0.0);

    for (float i = 0.0; i < 4.0; i++) {
        uv = fract(uv * 1.5) - 0.5;

        float d = length(uv) * exp(-length(uv0));

        vec3 col = palette(length(uv0) + i*.4 + Time*.4);

        d = sin(d*8. + Time)/8.;
        d = abs(d);

        d = pow(0.01 / d, 1.2);

        finalColor += col * d;
    }
        
    outColor[id_x * Width + id_y] = IntVec4(vec4(finalColor, 1.0));
}