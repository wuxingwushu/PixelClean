#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer Parameter//画布
{
   float Time;
   uint Width;
   uint Height;
};

layout(std430, binding = 1) buffer buf//画布
{
   uint outColor[];
};

uint IntVec4(vec4 color){
    if(color.x > 1.0f){
        color.x = 1.0f;
    }
    if(color.y > 1.0f){
        color.y = 1.0f;
    }
    if(color.z > 1.0f){
        color.z = 1.0f;
    }
    if(color.x < 0.0f){
        color.x = 0.0f;
    }
    if(color.y < 0.0f){
        color.y = 0.0f;
    }
    if(color.z < 0.0f){
        color.z = 0.0f;
    }

    uint ColorU = uint(color.x * 255) * 256;
    ColorU += uint(color.y * 255);
    ColorU += uint(color.z * 255) * 256 * 256;
    ColorU += uint(color.w * 255) * 256 * 256 * 256;
    return ColorU;
}

#define erot(p,A,a) mix(dot(A, p)*A, p, cos(a)) + cross(A,p)*sin(a)

float hash11(float p)
{
    p = fract(p * .1031);
    p *= p + 33.33;
    p *= p + p;
    return fract(p);
}

vec2 hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+33.33);
    return fract((p3.xx+p3.yz)*p3.zy);
}


void main() {
    const uint id_x = gl_GlobalInvocationID.x / Width;
    const uint id_y = gl_GlobalInvocationID.x % Width;
    vec2 fragCoord = vec2(id_x, Width - id_y);
    vec2 winCoord = vec2(Height, Width);
    
    vec4 color = vec4(0,0,0,1);
    
    // coordinates
    vec2 p = (fragCoord - winCoord / 2.) / Height;
    
    // perspective
    vec3 q = vec3(p, 1.0);
    q = erot(q, vec3(1,1,1), -.5);
    p = q.xy/q.z;
    
    // scroll
    p.y += Time*.1;
    
    // grid
    float grid = 16.;
    vec2 cell = floor(p*grid);
    
    // column animation
    float mask = floor(Time*hash11(cell.x));
    mask = step(.5,sin(mask));
    float speed = 40.*hash11(cell.x+75.);
    cell.y += floor(Time*speed)*mask;
    
    // random per cell
    vec2 rng = hash22(cell);
    
    
    
    // character selection
    int Char = int(Time * rng.x);
    int grd = int(grid);
    Char = (Char % 50)+145;
    vec2 offset = vec2(Char%grd, Char/grd);
    
    // atlas coordinates
    p = mod(p, 1./grid);
    p += offset/grid;
    vec4 map = vec4(0,0,0,1);
    
    // color
    bool colorful = sin(rng.y*6.+Time) > 0.5;
    if (colorful)
    {
        color.rgb = .5+.5*cos(vec3(0,2,4)+floor(cell.y*.1));
        color.rgb *= 1.-map.r;
    }
    else
    {
        color.rgb = vec3(map.r);
    }

        
    outColor[id_x * Width + id_y] = IntVec4(color);
}